source("http://bioconductor.org/biocLite.R")
biocLite()
biocLite("GenomicRanges")
library("GenomicRanges")
biocLite("GenomicFeatures")
library("GenomicFeatures")
biocLite("org.Hs.eg.db")
library("org.Hs.eg.db")
biocLite("org.Hs.eg.db")
library("org.Hs.eg.db")
library("org.Hs.eg.db")
biocLite("hom.Hs.inp.db")
library("hom.Hs.inp.db")
biocLite("reactome.db")
source("http://bioconductor.org/biocLite.R")
biocLite()
biocLite("reactome.db")
>library("reactome.db")
>biocLite("biomaRt")
biocLite()
library("reactome.db")
biocLite("biomaRt")
library("biomaRt")
biocLite("reactome.db")
library("reactome.db")
biocLite("biomaRt")
libary("biomaRt")
library("biomaRt")
biocLite("Homo.sapiens")
library("Homo.sapiens")
biocLite"rtracklayer"
biocLite("rtracklayer")
library("rtracklayer")
FPKM <- read.delim( "Desktop/PG2016/matFPKM.txt" )
plot( log2(FPKM$ectoderm_rep1 + 1), log2(FPKM$ectoderm_rep2 + 1),
xlab="rep1", ylab="rep2", main="ectoderm" )
?data
install.packages ("swirl")
library("swirl")
ls()
rm(list=ls("FPKM"))
rm(list=ls(FPKM))
warnings()
View(FPKM)
ls()
help(warnings)
swirl()
ls()
ls(FPKM)
ls
ls()
rm(FPKM)
swirl()
download.packages(swirl)
download.packages("swirl")
pwd
download.packages("swirl")
download.packages("swirl")
warnings(... =)
warnings(...)
warnings("dir.exists(destdir")
?data
data(iris)
str(iris)
plot(Petal.Width, Petal.Length)
df_width<-iris(Petal.Width)
iris
df_width<-iris[Petal.Width]
?df
?data.frame
df_virginica<-data.frame(iris,species=virginica)
df_virginica<-data.frame(iris,Species=virginica)
df_virginica<-iris[virginica]
df_virginica<-iris[virgi101:150nica]
df_virginica<-iris[101:150]
df_virginica<-iris[Petal.Width,"Petal.Length"]
df_virginica<-iris["Petal.Width","Petal.Length"]
df_virginica
df_virginica<-iris[virginica]
df_virginica<-iris[Species=virginica]
df_virginica<-iris(Species=virginica)
df_virginica<-iris[101:150]
df_virginica<-iris[101:150,"Petal.Width","Petal.Length"]
df_virginica<-iris["Petal.Width","Petal.Length"]
virginica
virginica
plot("Petal.Width","Petal.Length")
iris
plot(Petal.Width,Petal.Length)
?plot
iris
df_virginica<-iris("Petal.Length","Petal.Width")
df_virginica<-iris["Petal.Length","Petal.Width"]
plot(iris["Petal.Length","Petal.Width"])
?plot
plot(iris["Petal.Length"])
plot(iris["Petal.Length"],iris["Petal.Width"])
plot(iris["Petal.Length"],iris["Petal.Width"],0)
plot("Petal.Length","Petal.Width")
plot(iris["Petal.Length"],iris["Petal.Width"],type="n",axes=false,xlim=c(0,10),ylim=c(1,10))
df_virginica<-iris["Petal.Length","Petal.Width"]
?plot
virginica
str(virginica)
df_virginica<-iris["Petal.Length","Petal.Width"]
str(virginica)
df_virginica<-iris["Petal.Length","Petal.Width"]
data(virginica)
df_virginica<-iris["Petal.Length","Petal.Width"]
iris["Petal.Length","Petal.Width"]
iris[101,150]
?data.frame
df_virginica<-iris["Petal.Length","Petal.Width"]
df_virginica<-iris["Petal.Length"]
virginica
swirl
swirl()
download.packages(swirl)
install.packages(knitr)
install.packages(knitr)
"knitr"
install.packages("knitr")
library("knitr")
install.packages(yaml)
install.packages("yaml")
library("yaml")
install.packages("htmltools")
library("htmltools")
install.packages("rmarkdown")
library("rmarkdown")
source("http://bioconductor.org/biocLite.R")
biocLite()
biocLite("GenomicRanges")
library("GenomicRanges")
biocLite("GenomicFeatures")
library("GenomicFeatures")
biocLite("org.Hs.eg.db")
library("org.Hs.eg.db")
biocLite("hom.Hs.inp.db")
library("hom.Hs.inp.db")
biocLite("reactome.db")
library("reactome.db")
biocLite("biomart")
biocLite("biomaRt")
library("biomart")
library("biomaRt")
biocLite("Homo.sapiens")
library("Homo.sapiens")
biocLite("rtracklayer")
library("rtracklayer")
FPKM<-read.delim("Desktop/PG2016/matFPKM.txt")
plot(log2(FPKM$ectoderm_rep1+1),log2(FPKM$ectoderm_Rep2+1),xlab="rep1",ylab="rep2",main="ectoderm")
plot(log2(FPKM$ectoderm_rep1+1),log2(FPKM$ectoderm_rep2+1),xlab="rep1",ylab="rep2",main="ectoderm")
?data
data(iris)
iris
df_virginica<-iris[,101:150]
df_virginica<-iris[101:150,]
df_virginica
plot(df_virginica$Petal.Width,df_virginica$Petal.Length)
plot(df_virginica$Petal.Width,df_virginica$Petal.Length,xlab="PetalWidth",ylab="PetalLength")
plot(df_virginica$Petal.Width,df_virginica$Petal.Length,xlab="Petal Width",ylab="Petal Length")
plot(df_virginica$Petal.Width,df_virginica$Petal.Length,xlab="Petal Width",ylab="Petal Length",main="Petal Length vs Petal Width")
rm list(ls())
rm(list=ls())
install.packages(c("knitr", "tidyverse"))
nrow(res)
knitr::opts_chunk$set(echo = TRUE)
# load tidyverse
library(tidyverse)
# read in data
res <- read.csv("SupplementaryTable2_sczd_gene_full.csv")
# rename 1st column
colnames(res)[1] <- "newName"
colnames(res)
nrow(res)
res_hippo <- subset(res, region = HIPPO)
View(res)
View(res)
View(res_hippo)
res_hippo <- subset(res, region = "HIPPO")
res_hippo <- subset(res, region == "HIPPO")
res_hippo <- subset(res, region == HIPPO)
res_hippo <- subset(res, region == "HIPPO")
nrow(res_hippo)
res[,Symbol == "WASH7P"]
res[Symbol == "WASH7P",]
res
res[1,]
res[res$Symbol == "WASH7P",]
res[res$EntrezID == "102723897"]
res[res$EntrezID == 102723897]
res[res$EntrezID == 102723897,]
res[res$EntrezID == "102723897",]
head(res[res$EntrezID == "102723897",])
head(res[res$Symbol == "",])
head(res[res$Symbol == "NA",])
res_hippoNA <- subset(res, Symbol != "")
res_hippoNA <- subset(res_hippo, Symbol != "")
View(res_hippoNA)
View(res_hippoNA)
dim(res_hippoNA)
# subset to remove rows where Symbol is empty
res_hippoNA <- subset(res_hippo, Symbol != "")
dim(res_hippoNA)
typeof(res)
typeof(res_hippo)
res[1,2]
res[1,3]
res[1,1]
res[1,5]
res[2,5]
?append
median(res_hippoNA$meanExprs)
res_hippoNA$meanE
res_hippoNA$meanExprsBin <- ifelse(res_hippoNA$meanExprs <= median(res_hippoNA$meanExprs), "Low", "High")
View(res_hippoNA)
View(res_hippoNA)
median(res_hippoNA$meanExprs)
colnames(res_hippoNA)
ggplot(res_hippoNA) +
geom_point(mapping = aes(x = logFC, y = -log10(P.Value), color = meanExprsBin))
quantile(res_hippoNA$meanExprs)
quantile(res_hippoNA$meanExprs)[1]
quantile(res_hippoNA$meanExprs)[2]
typeof(quantile(res_hippoNA$meanExprs)[1])
typeof(quantile(res_hippoNA$meanExprs)[1,1])
typeof(quantile(res_hippoNA$meanExprs)[1])
quantile(res_hippoNA$meanExprs)[1]
quantile(res_hippoNA$meanExprs, names = FALSE)
quantile(res_hippoNA$meanExprs, names = FALSE)[1]
typeof(quantile(res_hippoNA$meanExprs, names = FALSE)[1])
0.25<quantile(res_hippoNA$meanExprs, names = FALSE)[1]
0.26<quantile(res_hippoNA$meanExprs, names = FALSE)[1]
x = 1
a = if (x < 1) {"Less"}
a = if (x < 1) {print ("Less")}
a
x <- c(1, 2, 3, 4, 5)
rm a
rmv a
remove a
rm a
rm(a)
x$bin <- c(N, N, N, N, N)
x$bin <- c(0,0,0,0,0)
View(x)
View(x)
df(x)
x <- data.frame("value" = 1:5, "bin" = c("N", "N", "N", "N", "N"))
x
if (x$value < 3) {x$bin <- "Low"}
if (x$value < 3) {x$bin <- "Low"}
elseif (x$value == 3) {x$bin <- "Equal"}
else {x$bin <- "High"}
for (i in x) {}
for (i in x$value) {
if (x$value < 3) {
x$bin <- "Low"}
elseif (x$value == 3) {
x$bin <- "Equal"}
else {x$bin <- "High"
}
}
for (i in x$value) {
if (x$value[i] < 3) {
x$bin[i] <- "Low"}
elseif (x$value[i] == 3) {
x$bin[i] <- "Equal"}
else {x$bin[i] <- "High"
}
}
for (i in x$value) {
if (x$value[i] < 3) {
x$bin[i] <- "Low"}
else if (x$value[i] == 3) {
x$bin[i] <- "Equal"}
else {x$bin[i] <- "High"
}
}
x
quantile(res_hippoNA$meanExprs, names = TRUE)
quantile(res_hippoNA$meanExprs, names = FALSE)[4]
First <- quantile(res_hippoNA$meanExprs, names = FALSE)[2]
Third <- quantile(res_hippoNA$meanExprs, names = FALSE)[4]
for (i in res_hippoNA$meanExprs) {
if (res_hippoNA$meanExprs[i] < First) {
res_hippoNA$meanExprsBin3[i] <- "Low"}
else if (res_hippoNA$meanExprs[i] > Third) {
res_hippoNA$meanExprsBin3[i] <- "High"}
else {
res_hippoNA$meanExprsBin3[i] <- "Middle"
}
}
First <- quantile(res_hippoNA$meanExprs, names = FALSE)[2]
Third <- quantile(res_hippoNA$meanExprs, names = FALSE)[4]
for (i in 1:nrow(res_hippoNA)) {
if (res_hippoNA$meanExprs[i] < First) {
res_hippoNA$meanExprsBin3[i] <- "Low"}
else if (res_hippoNA$meanExprs[i] > Third) {
res_hippoNA$meanExprsBin3[i] <- "High"}
else {
res_hippoNA$meanExprsBin3[i] <- "Middle"
}
}
view(res_hippoNA)
head(res_hippoNA$meanExprsBin3)
ggplot(res_hippoNA) +
geom_point(mapping = aes(
x = logFC,
y = -log10(P.Value),
color = meanExprsBin3))
levels(res_hippoNA$meanExprsBin3)
levels(res_hippoNA$meanExprsBin)
res_hippoNA$meanExprsBin3 <- factor(res_hippoNA$meanExprsBin3, levels = c("Low", "Middle", "High"))
levels(res_hippoNA$meanExprsBin3)
ggplot(res_hippoNA) +
geom_point(mapping = aes(
x = logFC,
y = -log10(P.Value),
color = meanExprsBin3))
plot <- ggplot(res_hippoNA) +
geom_point(mapping = aes(
x = logFC,
y = -log10(P.Value),
color = meanExprsBin))
plot
x
x$FC <- 2^(x$value)
x
res_hippoNA$FC <- 2^(res_hippoNA$logFC)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
# read in data
res <- read.csv("SupplementaryTable2_sczd_gene_full.csv")
# rename 1st column
colnames(res)[1] <- "newName"
colnames(res)
# subset to only include rows from the hippocampus (HIPPO)
res_hippo <- subset(res, region == "HIPPO")
nrow(res)
nrow(res_hippo)
# subset to remove rows where Symbol is empty
res_hippoNA <- subset(res_hippo, Symbol != "")
dim(res_hippoNA)
# create new column meanExprsBin where
# Low indicates meanExprs <= the median value of meanExprs
# High indicates meanExprs > the median value of meanExprs
res_hippoNA$meanExprsBin <- ifelse(res_hippoNA$meanExprs <= median(res_hippoNA$meanExprs), "Low", "High")
# volcano plot, color by meanExprsBin Low and High
plot1 <- ggplot(res_hippoNA) +
geom_point(mapping = aes(
x = logFC,
y = -log10(P.Value),
color = meanExprsBin))
plot1
# create new column meanExprsBin3 where
# Low indicates meanExprs < 1st quartile
# Medium indicates 1st quartile <= meanExprs <= 3rd quartile
# High indicates meanExprs > 3rd quartile
First <- quantile(res_hippoNA$meanExprs, names = FALSE)[2] # 1st quartile
Third <- quantile(res_hippoNA$meanExprs, names = FALSE)[4] # 3rd quartile
# iterate through each row to assign bins
for (i in 1:nrow(res_hippoNA)) {
if (res_hippoNA$meanExprs[i] < First) {
res_hippoNA$meanExprsBin3[i] <- "Low"
}
else if (res_hippoNA$meanExprs[i] > Third) {
res_hippoNA$meanExprsBin3[i] <- "High"
}
else {
res_hippoNA$meanExprsBin3[i] <- "Middle"
}
}
# volcano plot, color by meanExprsBin3 Low, Middle, and High
plot2 <- ggplot(res_hippoNA) +
geom_point(mapping = aes(
x = logFC,
y = -log10(P.Value),
color = meanExprsBin3))
plot2
# create new column meanExprsBin3 where
# Low indicates meanExprs < 1st quartile
# Medium indicates 1st quartile <= meanExprs <= 3rd quartile
# High indicates meanExprs > 3rd quartile
First <- quantile(res_hippoNA$meanExprs, names = FALSE)[2] # 1st quartile
Third <- quantile(res_hippoNA$meanExprs, names = FALSE)[4] # 3rd quartile
# iterate through each row to assign bins
for (i in 1:nrow(res_hippoNA)) {
if (res_hippoNA$meanExprs[i] < First) {
res_hippoNA$meanExprsBin3[i] <- "Low"
}
else if (res_hippoNA$meanExprs[i] > Third) {
res_hippoNA$meanExprsBin3[i] <- "High"
}
else {
res_hippoNA$meanExprsBin3[i] <- "Middle"
}
}
# volcano plot, color by meanExprsBin3 Low, Middle, and High
plot2 <- ggplot(res_hippoNA) +
geom_point(mapping = aes(
x = logFC,
y = -log10(P.Value),
color = meanExprsBin3))
plot2
plot2
install.packages('Seurat')
install.packages('BiocManager')
BiocManager::install("multtest")
install.packages('metap')
install.packages('Seurat')
if (segment/range > 0.7) {
outlier <- triplicate.ordered[1]
} else if (segment/range < 0.3) {
outlier <- triplicate.ordered[3]
} else {
outlier <- NA
}
source("http://www.bioconductor.org/bioclite.R")
source("http://www.bioconductor.org/biocLite.R")
source("http://www.bioconductor.org/biocManager.R")
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install(version = "3.14")
updateR()
BiocManager::install(tximeta)
BiocManager::install('tximeta')
setwd("~/Desktop/temp/Fahrner lab/Data/Weaver/fahrner_weaver/RNAseq")
library(TxDb.Mmusculus.UCSC.mm10.ensGene)
library(tximport)
library(DESeq2)
library(sva)
library(biomaRt)
###ezh2 heterozygous missense variant
# edited file path to run locally - CWG
files <- paste0("~/Desktop/temp/Fahrner lab/Data/Weaver/fahrner_weaver/RNAseq/quants_Leandros/",
list.files("quants_Leandros"), "/quant.sf")
###ezh2 heterozygous missense variant
# edited file path to run locally - CWG
files <- paste0("~/Desktop/temp/Fahrner lab/Data/Weaver/fahrner_weaver/RNAseq/quants_Leandros/",
list.files("quants_Leandros"), "/quant.sf")
names(files) <- c("mut_1_1", "mut_1_2",
"wt_1_1", "wt_1_2",
"mut_2_1", "mut_2_2",
"mut_3_1", "mut_3_2",
"wt_2_1", "wt_2_2",
"wt_3_1", "wt_3_2",
"wt_4_1", "wt_4_2",
"mut_4_1", "mut_4_2",
"mut_5_1", "mut_5_2",
"wt_5_1", "wt_5_2",
"mut_6_1", "mut_6_2")
######
# creates dataframe w/ tx ID and corresponding gene ID
txdb <- TxDb.Mmusculus.UCSC.mm10.ensGene
k <- keys(txdb, keytype = "GENEID")
df <- select(txdb, keys = k, keytype = "GENEID", columns = "TXNAME")
tx2gene <- df[, 2:1]
# imports tx counts from quant files and match to genes using tx2gene.
####### transcripts missing from tx2gene: 26405, 38265
txi <- tximport(files, type = "salmon", tx2gene = tx2gene,
countsFromAbundance = "lengthScaledTPM", ignoreTxVersion = TRUE)
txi
# create sample table with quant file paths
samples <- read.csv('RNAseq-samples.csv')
dir <- '~/Desktop/temp/Fahrner lab/Data/Weaver/fahrner_weaver/RNAseq/quants_Leandros'
files <- file.path(dir, paste(samples$Sample.ID, '_L001', sep=''), 'quant.sf')
file.exists(files)
coldata <- data.frame(files, names=samples$Sample.ID, condition=samples$Genotype, stringsAsFactors = FALSE)
# import transcript abundances
se <- tximeta(coldata)
library(tximeta)
library(SummarizedExperiment)
library(edgeR)
library(limma)
library(statmod)
library(biomaRt)
library(sva)
library(DESeq2)
library(tidyverse)
library(ggplot2)
library(ggrepel)
coldata <- data.frame(files, names=samples$Sample.ID, condition=samples$Genotype, stringsAsFactors = FALSE)
# import transcript abundances
se <- tximeta(coldata)
# summarize abundances to gene level
gse <- summarizeToGene(se)
gse
txi$counts
gse
colnames(gse)
gse$condition
files <- paste0("~/Desktop/temp/Fahrner lab/Data/Weaver/fahrner_weaver/RNAseq/quants_Leandros/",
list.files("quants_Leandros"), "/quant.sf")
# files <- paste0("~/Desktop/temp/Fahrner lab/Data/Weaver/fahrner_weaver/RNAseq/quants_Christine/",
#                 list.files("quants_Christine"), "/quant.sf")
names(files) <- c("mut_1_1", "mut_1_2",
"wt_1_1", "wt_1_2",
"mut_2_1", "mut_2_2",
"mut_3_1", "mut_3_2",
"wt_2_1", "wt_2_2",
"wt_3_1", "wt_3_2",
"wt_4_1", "wt_4_2",
"mut_4_1", "mut_4_2",
"mut_5_1", "mut_5_2",
"wt_5_1", "wt_5_2",
"mut_6_1", "mut_6_2")
txdb <- TxDb.Mmusculus.UCSC.mm10.ensGene
k <- keys(txdb, keytype = "GENEID")
df <- select(txdb, keys = k, keytype = "GENEID", columns = "TXNAME")
tx2gene <- df[, 2:1]
